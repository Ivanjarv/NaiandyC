#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.0a8 on Sat Sep 26 14:12:14 2020
#

import wx




class Entry(wx.Panel):
    def __init__(self, *args, **kwds):
        kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.SetPos(True)

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)

        self.btm_img = wx.BitmapButton(self, wx.ID_ANY, wx.Bitmap("C:/Users/Dell/Documents/python/Nainady App/imagenes/DATAnext.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.btm_img.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.btm_img.SetSize(self.btm_img.GetBestSize())
        sizer_1.Add(self.btm_img, 0, 0, 0)

        self.text = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.BORDER_NONE)
        self.text.SetMinSize((101, 18))
        sizer_1.Add(self.text, 1, wx.EXPAND, 0)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.Layout()

        self.Bind(wx.EVT_KILL_FOCUS, self.onkillfocus, self.text)
        self.Bind(wx.EVT_SET_FOCUS, self.onsetfocus, self.text)

    def onkillfocus(self, event):
        print("Event handler 'onkillfocus' not implemented!")
        event.Skip()

    def onsetfocus(self, event):
        print("Event handler 'onsetfocus' not implemented!")
        event.Skip()


class BaseNainady(wx.Frame):
    def __init__(self, *args, **kwds):
        kwds["style"] = kwds.get("style", 0) | wx.BORDER_SIMPLE | wx.FRAME_FLOAT_ON_PARENT | wx.RESIZE_BORDER
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((700, 396))

        self.szprincipal = wx.BoxSizer(wx.VERTICAL)

        self.panelsup = wx.Panel(self, wx.ID_ANY)
        self.panelsup.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.szprincipal.Add(self.panelsup, 0, wx.EXPAND, 0)

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)

        self.szpu = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.szpu, 1, wx.BOTTOM | wx.EXPAND | wx.TOP, 3)

        self.btm_firth = wx.BitmapButton(self.panelsup, wx.ID_ANY, wx.Bitmap("C:\\Users\\Dell\\Documents\\python\\Nainady App\\imagenes\\DATAfirst.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.btm_firth.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.btm_firth.SetSize(self.btm_firth.GetBestSize())
        self.szpu.Add(self.btm_firth, 0, wx.ALL, 3)

        self.btm_previous = wx.BitmapButton(self.panelsup, wx.ID_ANY, wx.Bitmap("C:\\Users\\Dell\\Documents\\python\\Nainady App\\imagenes\\DATAprevious.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.btm_previous.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.btm_previous.SetSize(self.btm_previous.GetBestSize())
        self.szpu.Add(self.btm_previous, 0, wx.ALL, 3)

        self.btm_next = wx.BitmapButton(self.panelsup, wx.ID_ANY, wx.Bitmap("C:\\Users\\Dell\\Documents\\python\\Nainady App\\imagenes\\DATAnext.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.btm_next.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.btm_next.SetSize(self.btm_next.GetBestSize())
        self.szpu.Add(self.btm_next, 0, wx.ALL, 3)

        self.btm_last = wx.BitmapButton(self.panelsup, wx.ID_ANY, wx.Bitmap("C:\\Users\\Dell\\Documents\\python\\Nainady App\\imagenes\\DATAlast.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.btm_last.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.btm_last.SetSize(self.btm_last.GetBestSize())
        self.szpu.Add(self.btm_last, 0, wx.ALL, 3)

        self.btm_print = wx.BitmapButton(self.panelsup, wx.ID_ANY, wx.Bitmap("C:\\Users\\Dell\\Documents\\python\\Nainady App\\imagenes\\impresora.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.btm_print.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.btm_print.SetSize(self.btm_print.GetBestSize())
        self.szpu.Add(self.btm_print, 0, wx.ALL, 3)

        self.btm_save = wx.BitmapButton(self.panelsup, wx.ID_ANY, wx.Bitmap("C:\\Users\\Dell\\Documents\\python\\Nainady App\\imagenes\\pendrive.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.btm_save.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.btm_save.SetSize(self.btm_save.GetBestSize())
        self.szpu.Add(self.btm_save, 0, wx.ALL, 3)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_3, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 3)

        self.btm_minimizar = wx.BitmapButton(self.panelsup, wx.ID_ANY, wx.Bitmap("C:\\Users\\Dell\\Documents\\python\\Nainady App\\imagenes\\minimizar.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.btm_minimizar.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.btm_minimizar.SetSize(self.btm_minimizar.GetBestSize())
        sizer_3.Add(self.btm_minimizar, 0, wx.ALL, 3)

        self.btm_maximizar = wx.BitmapButton(self.panelsup, wx.ID_ANY, wx.Bitmap("C:/Users/Dell/Documents/python/Nainady App/imagenes/cubo.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.btm_maximizar.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.btm_maximizar.SetSize(self.btm_maximizar.GetBestSize())
        sizer_3.Add(self.btm_maximizar, 0, wx.ALL, 3)

        self.btm_close = wx.BitmapButton(self.panelsup, wx.ID_ANY, wx.Bitmap("C:/Users/Dell/Documents/python/Nainady App/imagenes/cerrar.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.btm_close.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.btm_close.SetSize(self.btm_close.GetBestSize())
        sizer_3.Add(self.btm_close, 0, wx.ALL, 3)

        self.szprincipal.Add((0, 0), 0, 0, 0)

        self.panelsup.SetSizer(sizer_1)

        self.SetSizer(self.szprincipal)

        self.Layout()
        self.Centre()

        self.Bind(wx.EVT_LEFT_DOWN, self.onleftdown, self.panelsup)
        self.Bind(wx.EVT_LEFT_UP, self.onleftup, self.panelsup)
        self.Bind(wx.EVT_MOTION, self.onmousemove, self.panelsup)
        self.Bind(wx.EVT_ENTER_WINDOW, self.btnonenter, self.btm_firth)
        self.Bind(wx.EVT_LEAVE_WINDOW, self.btnleavve, self.btm_firth)
        self.Bind(wx.EVT_ENTER_WINDOW, self.btnonenter, self.btm_previous)
        self.Bind(wx.EVT_LEAVE_WINDOW, self.btnleavve, self.btm_previous)
        self.Bind(wx.EVT_ENTER_WINDOW, self.btnonenter, self.btm_next)
        self.Bind(wx.EVT_LEAVE_WINDOW, self.btnleavve, self.btm_next)
        self.Bind(wx.EVT_ENTER_WINDOW, self.btnonenter, self.btm_last)
        self.Bind(wx.EVT_LEAVE_WINDOW, self.btnleavve, self.btm_last)
        self.Bind(wx.EVT_ENTER_WINDOW, self.btnonenter, self.btm_print)
        self.Bind(wx.EVT_LEAVE_WINDOW, self.btnleavve, self.btm_print)
        self.Bind(wx.EVT_ENTER_WINDOW, self.btnonenter, self.btm_save)
        self.Bind(wx.EVT_LEAVE_WINDOW, self.btnleavve, self.btm_save)
        self.Bind(wx.EVT_BUTTON, self.minimizar, self.btm_minimizar)
        self.Bind(wx.EVT_ENTER_WINDOW, self.btnonenterright, self.btm_minimizar)
        self.Bind(wx.EVT_LEAVE_WINDOW, self.btnleavveright, self.btm_minimizar)
        self.Bind(wx.EVT_BUTTON, self.maximizar, self.btm_maximizar)
        self.Bind(wx.EVT_ENTER_WINDOW, self.btnonenterright, self.btm_maximizar)
        self.Bind(wx.EVT_LEAVE_WINDOW, self.btnleavveright, self.btm_maximizar)
        self.Bind(wx.EVT_BUTTON, self.close, self.btm_close)
        self.Bind(wx.EVT_ENTER_WINDOW, self.btnonenterright, self.btm_close)
        self.Bind(wx.EVT_LEAVE_WINDOW, self.btnleavveright, self.btm_close)

    def onleftdown(self, event):
        print("Event handler 'onleftdown' not implemented!")
        event.Skip()

    def onleftup(self, event):
        print("Event handler 'onleftup' not implemented!")
        event.Skip()

    def onmousemove(self, event):
        print("Event handler 'onmousemove' not implemented!")
        event.Skip()

    def btnonenter(self, event):
        print("Event handler 'btnonenter' not implemented!")
        event.Skip()

    def btnleavve(self, event):
        print("Event handler 'btnleavve' not implemented!")
        event.Skip()

    def minimizar(self, event):
        print("Event handler 'minimizar' not implemented!")
        event.Skip()

    def btnonenterright(self, event):
        print("Event handler 'btnonenterright' not implemented!")
        event.Skip()

    def btnleavveright(self, event):
        print("Event handler 'btnleavveright' not implemented!")
        event.Skip()

    def maximizar(self, event):
        print("Event handler 'maximizar' not implemented!")
        event.Skip()

    def close(self, event):
        print("Event handler 'close' not implemented!")
        event.Skip()


class MainWindows(wx.Frame):
    def __init__(self, *args, **kwds):
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((800, 600))
        self.SetTitle("Naiandy")

        # Menu Bar
        self.menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        self.menubar.mregisto = wxglade_tmp_menu.Append(wx.ID_ANY, "&Registro\tCTRL-R", "Entreda de Diario")
        self.Bind(wx.EVT_MENU, self.onregistro, self.menubar.mregisto)
        self.menubar.mcxc = wxglade_tmp_menu.Append(wx.ID_ANY, "Cuenta por &Cobrar\tF1", "Factura a Cliente")
        self.Bind(wx.EVT_MENU, self.cuentaporcobrar, self.menubar.mcxc)
        self.menubar.mcxp = wxglade_tmp_menu.Append(wx.ID_ANY, "Cuenta por &Pagar\tF3", "Factura a Proveedor")
        self.Bind(wx.EVT_MENU, self.cuentaporpagar, self.menubar.mcxp)
        self.menubar.mrecibodemercancia = wxglade_tmp_menu.Append(wx.ID_ANY, "Recibo de &Mercancia\tCTRL-M", "Registro de Mercancia Recibida")
        self.Bind(wx.EVT_MENU, self.recibodemercancia, self.menubar.mrecibodemercancia)
        self.menubar.mcatalogodeuenta = wxglade_tmp_menu.Append(wx.ID_ANY, "C&atalogo de Cuenta\tCTRL-L", "Catalogo de Cuenta")
        self.Bind(wx.EVT_MENU, self.catalogodecuenta, self.menubar.mcatalogodeuenta)
        self.menubar.mcuenta = wxglade_tmp_menu.Append(wx.ID_ANY, "C&uenta\tCTRL-U", "Create Cueta")
        self.Bind(wx.EVT_MENU, self.cuenta, self.menubar.mcuenta)
        wxglade_tmp_menu.AppendSeparator()
        self.menubar.mbloquearapp = wxglade_tmp_menu.Append(wx.ID_ANY, "&Bloquear App\tCTRL-B", u"Bloque la Aplicación")
        self.Bind(wx.EVT_MENU, self.bloquearapp, self.menubar.mbloquearapp)
        self.menubar.mquit = wxglade_tmp_menu.Append(wx.ID_ANY, "&Quit\tCTRL-Q", u"Cierra la Applicación")
        self.Bind(wx.EVT_MENU, self.onquit, self.menubar.mquit)
        self.menubar.Append(wxglade_tmp_menu, "&Regitro")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu_sub = wx.Menu()
        self.menubar.mingreso = wxglade_tmp_menu_sub.Append(wx.ID_ANY, "&Ingeso Por...\tF2", "Recibo de Ingreso")
        self.Bind(wx.EVT_MENU, self.ingesopor, self.menubar.mingreso)
        self.menubar.mpagode = wxglade_tmp_menu_sub.Append(wx.ID_ANY, "&Pago de...\tF4", "Pagos")
        self.Bind(wx.EVT_MENU, self.pagode, self.menubar.mpagode)
        wxglade_tmp_menu_sub.AppendSeparator()
        self.menubar.mconciliaciones = wxglade_tmp_menu_sub.Append(wx.ID_ANY, "&Conciliaciones\tF5", "")
        self.Bind(wx.EVT_MENU, self.conciliaciones, self.menubar.mconciliaciones)
        wxglade_tmp_menu.Append(wx.ID_ANY, "&Banco", wxglade_tmp_menu_sub, "")
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Balanza de &Comprobacion", u"Balanza de Comprobaciòn")
        self.Bind(wx.EVT_MENU, self.balanza_de_comprobacion, item)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu_sub = wx.Menu()
        self.menubar.balance_general = wxglade_tmp_menu_sub.Append(wx.ID_ANY, "&Balance General", "Genera el Balance General")
        self.Bind(wx.EVT_MENU, self.balance_general, self.menubar.balance_general)
        self.menubar.estado_de_resultado = wxglade_tmp_menu_sub.Append(wx.ID_ANY, "&Estado de Resultado", "Genera el Estado de Resultado")
        self.Bind(wx.EVT_MENU, self.estado_de_resultado, self.menubar.estado_de_resultado)
        self.menubar.flujo_de_efectivo = wxglade_tmp_menu_sub.Append(wx.ID_ANY, "&Flujo de Esfectivo", "Geenera el Estado de Flujo de Esfectivo")
        self.Bind(wx.EVT_MENU, self.flujo_de_efectivo, self.menubar.flujo_de_efectivo)
        wxglade_tmp_menu_sub_sub = wx.Menu()
        self.menubar.estado_de_capital = wxglade_tmp_menu_sub_sub.Append(wx.ID_ANY, "Estado de &Capita", "Genera el Estado de Capital")
        self.Bind(wx.EVT_MENU, self.Estado_de_capital, self.menubar.estado_de_capital)
        wxglade_tmp_menu_sub.Append(wx.ID_ANY, "&Otros Estado", wxglade_tmp_menu_sub_sub, "")
        wxglade_tmp_menu.Append(wx.ID_ANY, "&Estado Finacieros", wxglade_tmp_menu_sub, "")
        self.menubar.Append(wxglade_tmp_menu, "&Finanza")
        wxglade_tmp_menu = wx.Menu()
        self.menubar.mhabilitar = wxglade_tmp_menu.Append(wx.ID_ANY, "&Desabilitar Barrra de Herramienta\tCTRL-H", "Habilita o Desabilitar la Barra de Herramienta", wx.ITEM_CHECK)
        self.Bind(wx.EVT_MENU, self.habilitar, self.menubar.mhabilitar)
        self.menubar.Append(wxglade_tmp_menu, "&Habilitar")
        wxglade_tmp_menu = wx.Menu()
        self.menubar.itbis_en_compra = wxglade_tmp_menu.Append(wx.ID_ANY, "ITBIS en &Compra 606", "General el formulario 606")
        self.Bind(wx.EVT_MENU, self.itbis_en_compra, self.menubar.itbis_en_compra)
        self.menubar.itbis_en_venta = wxglade_tmp_menu.Append(wx.ID_ANY, "ITBIS en &Venta 607", "General el formulario 607")
        self.Bind(wx.EVT_MENU, self.itbis_en_venta, self.menubar.itbis_en_venta)
        self.menubar.Formulario_de_NCF_Nulo = wxglade_tmp_menu.Append(wx.ID_ANY, "&Formulario de NCF Nulo 608", "Genera el formulario 608")
        self.Bind(wx.EVT_MENU, self.Formulario_de_NCF_Nulo, self.menubar.Formulario_de_NCF_Nulo)
        self.menubar.itbis_en_aduana = wxglade_tmp_menu.Append(wx.ID_ANY, "ITBIS en &Aduana 609", "Genera elFormulario 609")
        self.Bind(wx.EVT_MENU, self.itbis_en_aduana, self.menubar.itbis_en_aduana)
        wxglade_tmp_menu.AppendSeparator()
        self.menubar.ir_dicisiete = wxglade_tmp_menu.Append(wx.ID_ANY, "IR-17", "Genera el formulario de IR-17")
        self.Bind(wx.EVT_MENU, self.ir_dicisiete, self.menubar.ir_dicisiete)
        self.menubar.ir_tres = wxglade_tmp_menu.Append(wx.ID_ANY, "IR-3", "Genera el Formulario IR-3")
        self.Bind(wx.EVT_MENU, self.ir_tres, self.menubar.ir_tres)
        self.menubar.Append(wxglade_tmp_menu, "&Impueto")
        wxglade_tmp_menu = wx.Menu()
        self.menubar.mcrearusuario = wxglade_tmp_menu.Append(wx.ID_ANY, "Cear &Usuario\tF10", "Crea un Nuevo Usuario")
        self.Bind(wx.EVT_MENU, self.crearusuario, self.menubar.mcrearusuario)
        self.menubar.mcxcempleado = wxglade_tmp_menu.Append(wx.ID_ANY, "&CXC EMPLEADO\tCTRL-C", "Crear Cuenta por Cobrar a Empleado")
        self.Bind(wx.EVT_MENU, self.oncxcempleado, self.menubar.mcxcempleado)
        self.menubar.mdescuento = wxglade_tmp_menu.Append(wx.ID_ANY, "&Decuento a Empleado\tCTRL-D", "Descueto a Empleado")
        self.Bind(wx.EVT_MENU, self.ondescuentoaempleado, self.menubar.mdescuento)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu_sub = wx.Menu()
        self.menubar.magnadirempleado = wxglade_tmp_menu_sub.Append(wx.ID_ANY, u"&Añadir Empleado\tF6", "Regitrar en empleado ")
        self.Bind(wx.EVT_MENU, self.agnadirempleado, self.menubar.magnadirempleado)
        self.menubar.magnadirnomina = wxglade_tmp_menu_sub.Append(wx.ID_ANY, u"Añadir &Nomina\tF7", u"Añade Nomina")
        self.Bind(wx.EVT_MENU, self.agnomina, self.menubar.magnadirnomina)
        self.menubar.mimpuestonomina = wxglade_tmp_menu_sub.Append(wx.ID_ANY, "&Impuesto Nominales\tF8", "Configura los Impuestos Nominales")
        self.Bind(wx.EVT_MENU, self.impuestonomina, self.menubar.mimpuestonomina)
        wxglade_tmp_menu.Append(wx.ID_ANY, "&Nomina", wxglade_tmp_menu_sub, "")
        self.menubar.Append(wxglade_tmp_menu, "&Gestion")
        wxglade_tmp_menu = wx.Menu()
        self.menubar.mconfiguraciones = wxglade_tmp_menu.Append(wx.ID_ANY, "&Configuraciones Generales\tF12", "Configuraciones de la Aplicacion")
        self.Bind(wx.EVT_MENU, self.configuraciones, self.menubar.mconfiguraciones)
        self.menubar.Append(wxglade_tmp_menu, "&Configuraciones")
        self.macerca = wx.Menu()
        self.menubar.Append(self.macerca, "&Acerca...")
        self.SetMenuBar(self.menubar)
        # Menu Bar end

        self.statusbar = self.CreateStatusBar(1)
        self.statusbar.SetStatusWidths([-1])

        # Tool Bar
        self.toolbar = wx.ToolBar(self, -1)
        tool = self.toolbar.AddTool(wx.ID_ANY, "Registro", wx.Bitmap("C:/Users/Dell/Documents/python/Nainady App/imagenes/notebook.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Entrada de Diario", "Abre el formulario para hacer una entada en el Libro Diario")
        self.Bind(wx.EVT_TOOL, self.onregistro, id=tool.GetId())
        tool = self.toolbar.AddTool(wx.ID_ANY, "cxc", wx.Bitmap("C:/Users/Dell/Documents/python/Nainady App/imagenes/facturacion.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Cuenta por Cobrar", "Abrir formulario de Cuenta por Cobrar")
        self.Bind(wx.EVT_TOOL, self.cuentaporcobrar, id=tool.GetId())
        tool = self.toolbar.AddTool(wx.ID_ANY, "ingreso", wx.Bitmap("C:/Users/Dell/Documents/python/Nainady App/imagenes/business-color_money-bag_icon-icons.com_53447.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Recibo de Ingreso", "Abril formulario de Recibo de Ingreso")
        self.Bind(wx.EVT_TOOL, self.resivodeingreso, id=tool.GetId())
        tool = self.toolbar.AddTool(wx.ID_ANY, "cxp", wx.Bitmap("C:/Users/Dell/Documents/python/Nainady App/imagenes/receipt_106581.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Cuenta por Pagar", "Abrir formulario de Cuenta por Pagar")
        self.Bind(wx.EVT_TOOL, self.cuentaporpagar, id=tool.GetId())
        tool = self.toolbar.AddTool(wx.ID_ANY, "pago", wx.Bitmap("C:/Users/Dell/Documents/python/Nainady App/imagenes/pay_cash_payment_money_dollar_bill_icon_143267.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Hacer Pagos", "Abril formulario de Pago a Proveedores")
        self.Bind(wx.EVT_TOOL, self.pagos, id=tool.GetId())
        tool = self.toolbar.AddTool(wx.ID_ANY, "mercancia", wx.Bitmap("C:/Users/Dell/Documents/python/Nainady App/imagenes/task_calendar_timeline_plan_start_date_due_date_icon_142241.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Mercancia Recibida", "Abril formulario de Mercacia Recibida")
        self.Bind(wx.EVT_TOOL, self.mercanciaresibida, id=tool.GetId())
        self.toolbar.AddSeparator()
        tool = self.toolbar.AddTool(wx.ID_ANY, "cuenta", wx.Bitmap("C:/Users/Dell/Documents/python/Nainady App/imagenes/expediente.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Crea una Cuenta", "Crea una Nueva Cuenta")
        self.Bind(wx.EVT_TOOL, self.cuenta, id=tool.GetId())
        self.toolbar.AddSeparator()
        tool = self.toolbar.AddTool(wx.ID_ANY, "Bloquear", wx.Bitmap("C:/Users/Dell/Documents/python/Nainady App/imagenes/escudo.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"Bloque la Aplicación", u"Bloque la aplicación hasta que se introduzca la contraseña nuevamente")
        self.Bind(wx.EVT_TOOL, self.bloquear, id=tool.GetId())
        tool = self.toolbar.AddTool(wx.ID_ANY, "salir", wx.Bitmap("C:/Users/Dell/Documents/python/Nainady App/imagenes/Exit.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"Cerrar Aplicación", u"Cierre de la Aplicación")
        self.Bind(wx.EVT_TOOL, self.close, id=tool.GetId())
        self.SetToolBar(self.toolbar)
        self.toolbar.Realize()
        # Tool Bar end
        self.Layout()
        self.Centre()


    def onregistro(self, event):
        print("Event handler 'onregistro' not implemented!")
        event.Skip()

    def cuentaporcobrar(self, event):
        print("Event handler 'cuentaporcobrar' not implemented!")
        event.Skip()

    def cuentaporpagar(self, event):
        print("Event handler 'cuentaporpagar' not implemented!")
        event.Skip()

    def recibodemercancia(self, event):
        print("Event handler 'recibodemercancia' not implemented!")
        event.Skip()

    def catalogodecuenta(self, event):
        print("Event handler 'catalogodecuenta' not implemented!")
        event.Skip()

    def cuenta(self, event):
        print("Event handler 'cuenta' not implemented!")
        event.Skip()

    def bloquearapp(self, event):
        print("Event handler 'bloquearapp' not implemented!")
        event.Skip()

    def onquit(self, event):
        print("Event handler 'onquit' not implemented!")
        event.Skip()

    def ingesopor(self, event):
        print("Event handler 'ingesopor' not implemented!")
        event.Skip()

    def pagode(self, event):
        print("Event handler 'pagode' not implemented!")
        event.Skip()

    def conciliaciones(self, event):
        print("Event handler 'conciliaciones' not implemented!")
        event.Skip()

    def balanza_de_comprobacion(self, event):
        print("Event handler 'balanza_de_comprobacion' not implemented!")
        event.Skip()

    def balance_general(self, event):
        print("Event handler 'balance_general' not implemented!")
        event.Skip()

    def estado_de_resultado(self, event):
        print("Event handler 'estado_de_resultado' not implemented!")
        event.Skip()

    def flujo_de_efectivo(self, event):
        print("Event handler 'flujo_de_efectivo' not implemented!")
        event.Skip()

    def Estado_de_capital(self, event):
        print("Event handler 'Estado_de_capital' not implemented!")
        event.Skip()

    def habilitar(self, event):
        print("Event handler 'habilitar' not implemented!")
        event.Skip()

    def itbis_en_compra(self, event):
        print("Event handler 'itbis_en_compra' not implemented!")
        event.Skip()

    def itbis_en_venta(self, event):
        print("Event handler 'itbis_en_venta' not implemented!")
        event.Skip()

    def Formulario_de_NCF_Nulo(self, event):
        print("Event handler 'Formulario_de_NCF_Nulo' not implemented!")
        event.Skip()

    def itbis_en_aduana(self, event):
        print("Event handler 'itbis_en_aduana' not implemented!")
        event.Skip()

    def ir_dicisiete(self, event):
        print("Event handler 'ir_dicisiete' not implemented!")
        event.Skip()

    def ir_tres(self, event):
        print("Event handler 'ir_tres' not implemented!")
        event.Skip()

    def crearusuario(self, event):
        print("Event handler 'crearusuario' not implemented!")
        event.Skip()

    def oncxcempleado(self, event):
        print("Event handler 'oncxcempleado' not implemented!")
        event.Skip()

    def ondescuentoaempleado(self, event):
        print("Event handler 'ondescuentoaempleado' not implemented!")
        event.Skip()

    def agnadirempleado(self, event):
        print("Event handler 'agnadirempleado' not implemented!")
        event.Skip()

    def agnomina(self, event):
        print("Event handler 'agnomina' not implemented!")
        event.Skip()

    def impuestonomina(self, event):
        print("Event handler 'impuestonomina' not implemented!")
        event.Skip()

    def configuraciones(self, event):
        print("Event handler 'configuraciones' not implemented!")
        event.Skip()

    def acerca(self, event):
        print("Event handler 'acerca' not implemented!")
        event.Skip()

    def resivodeingreso(self, event):
        print("Event handler 'resivodeingreso' not implemented!")
        event.Skip()

    def pagos(self, event):
        print("Event handler 'pagos' not implemented!")
        event.Skip()

    def mercanciaresibida(self, event):
        print("Event handler 'mercanciaresibida' not implemented!")
        event.Skip()

    def bloquear(self, event):
        print("Event handler 'bloquear' not implemented!")
        event.Skip()

    def close(self, event):
        print("Event handler 'close' not implemented!")
        event.Skip()


class MyFrame(wx.MDIParentFrame):
    def __init__(self, *args, **kwds):
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.MDIChildFrame.__init__(self, *args, **kwds)
        self.SetSize((400, 294))
        self.SetTitle("frame")

        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "&Open", "Abril Ventana")
        self.Bind(wx.EVT_MENU, self.open, item)
        self.frame_menubar.Append(wxglade_tmp_menu, "&File")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end

        # Tool Bar
        self.frame_toolbar = wx.ToolBar(self, -1, style=wx.TB_DEFAULT_STYLE)
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "&open CTRL-O", wx.Bitmap("C:/Users/Dell/Documents/python/Nainady App/imagenes/business-color_money-bag_icon-icons.com_53447.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Abril Ventana", "Abril Ventana")
        self.Bind(wx.EVT_TOOL, self.open, id=tool.GetId())
        self.SetToolBar(self.frame_toolbar)
        self.frame_toolbar.Realize()
        # Tool Bar end
        self.Layout()
        self.Centre()


    def open(self, event):
        print("Event handler 'open' not implemented!")
        event.Skip()


class MyApp(wx.App):
    def OnInit(self):
        self.mainwindows = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.mainwindows)
        self.mainwindows.Show()
        return True

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
